import 'dart:io';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';
import 'package:flutter_soloud/flutter_soloud.dart' as soloud;
import 'package:path_provider/path_provider.dart';
import 'package:pkg_dinh_nghia_dv_ss0020/pkg_dinh_nghia_dv_ss0020_exp.dart';

enum LoaiHinhAmThanh { amThanhHieuUng, amThanhBackground }

/// -----
/// TODO: C·∫•u Tr√∫c Ph√°t √Çm Thanh C∆° B·∫£n
/// -----
mixin CAUTRUCPHATAMTHANHCOBAN {
  /// -----
  /// TODO: (Source) Ngu·ªìn √Çm Thanh
  /// -----
  String? _nguonAmThanh;
  String? get getNguonAmThanh => _nguonAmThanh;
  Future<void> caiDatNguonAmThanh({required String? value, bool? caiDatUuTien}) async {
    if (caiDatUuTien == true) {
      _nguonAmThanh = value;
    } else {
      _nguonAmThanh ??= value;
    }

    return;
  }

  /// -----
  /// TODO: Ngu·ªìn √Çm Thanh ƒê√£ L∆∞u V√†o V√πng (B·ªô) Nh·ªõ T·∫°m
  /// -----
  String? _nguonAmThanhLuuVaoRam;
  String? get getNguonAmThanhLuuVaoRam => _nguonAmThanhLuuVaoRam;
  Future<void> caiDatNguonAmThanhLuuVaoRam({required String? value, bool? caiDatUuTien}) async {
    if (caiDatUuTien == true) {
      _nguonAmThanhLuuVaoRam = value;
    } else {
      _nguonAmThanhLuuVaoRam ??= value;
    }

    return;
  }

  /// -----
  /// TODO: C√†i ƒê·∫∑t (T·ª± ƒê·ªông) Ngu·ªìn √Çm Thanh ƒê√£ L∆∞u V√†o V√πng (B·ªô) Nh·ªõ T·∫°m
  /// -----
  Future<void> caiDatTuDongNguonAmThanhLuuVaoRam() async {
    /// -----
    /// TODO: Comment ƒê·ªÉ Qu√° Tr√¨nh √Çm Thanh Ho·∫°t ƒê·ªông
    /// -----
    // return;

    if (getNguonAmThanh?.isNotEmpty == true) {
      try {
        final nguonAmThanhLuuVaoRam = await copyPackageMp3ToTempIfNeeded(assetPath: getNguonAmThanh);

        if (nguonAmThanhLuuVaoRam != null && nguonAmThanhLuuVaoRam.isNotEmpty == true) {
          await caiDatNguonAmThanhLuuVaoRam(value: nguonAmThanhLuuVaoRam, caiDatUuTien: true);

          if (getNguonAmThanhLuuVaoRam != null && getNguonAmThanhLuuVaoRam?.isNotEmpty == true) {
            try {
              soloud.AudioSource? nguonAmThanhSanSang = await soloud.SoLoud.instance.loadFile(getNguonAmThanhLuuVaoRam!);

              await caiDatNguonAmThanhSanSang(value: nguonAmThanhSanSang, caiDatUuTien: true);

              if (kDebugMode) {
                print('üü¢ Load File √Çm Thanh S·∫µn S√†ng Th√†nh C√¥ng: $nguonAmThanhSanSang');
              }
            } catch (e) {
              if (kDebugMode) {
                print('üí¢üí¢üí¢ Load File √Çm Thanh S·∫µn S√†ng => Kh√¥ng Th√†nh C√¥ng üí¢üí¢üí¢: $getNguonAmThanh');
              }
            }
          }
        }
      } catch (e) {
        if (kDebugMode) {
          print('üí¢üí¢üí¢ Load File √Çm Thanh S·∫µn S√†ng => Kh√¥ng Th√†nh C√¥ng üí¢üí¢üí¢: $getNguonAmThanh');
        }
      }
    }

    return;
  }

  /// -----
  /// TODO: Ngu·ªìn √Çm Thanh S·∫µn S√†ng
  /// -----
  soloud.AudioSource? _nguonAmThanhSanSang;
  soloud.AudioSource? get getNguonAmThanhSanSang => _nguonAmThanhSanSang;
  Future<void> caiDatNguonAmThanhSanSang({required soloud.AudioSource? value, bool? caiDatUuTien}) async {
    if (caiDatUuTien == true) {
      _nguonAmThanhSanSang = value;
    } else {
      _nguonAmThanhSanSang ??= value;
    }

    return;
  }

  /// -----
  /// TODO: M√°y Ph√°t √Çm Thanh
  /// -----
  MAYPHATAMTHANHCOBAN? _mayPhatAmThanh;
  MAYPHATAMTHANHCOBAN? get getMayPhatAmThanh => _mayPhatAmThanh;
  Future<void> caiDatMayPhatAmThanh({required MAYPHATAMTHANHCOBAN? value, bool? caiDatUuTien}) async {
    if (caiDatUuTien == true) {
      _mayPhatAmThanh = value;
    } else {
      _mayPhatAmThanh ??= value;
    }

    return;
  }

  /// -----
  /// TODO: Lo·∫°i H√¨nh √Çm Thanh
  /// -----
  LoaiHinhAmThanh? _loaiHinhAmThanh;
  LoaiHinhAmThanh get getLoaiHinhAmThanh => _loaiHinhAmThanh ?? LoaiHinhAmThanh.amThanhHieuUng;
  Future<void> caiDatLoaiHinhAmThanh({required LoaiHinhAmThanh value, bool? caiDatUuTien}) async {
    if (caiDatUuTien == true) {
      _loaiHinhAmThanh = value;
    } else {
      _loaiHinhAmThanh ??= value;
    }

    return;
  }

  Future<void> caiDatLoaiHinhAmThanhHieuUng() async {
    await caiDatLoaiHinhAmThanh(value: LoaiHinhAmThanh.amThanhHieuUng);
  }

  Future<void> caiDatLoaiHinhAmThanhBackground() async {
    await caiDatLoaiHinhAmThanh(value: LoaiHinhAmThanh.amThanhBackground);
  }

  /// -----
  /// TODO: Ph√°t √Çm Thanh
  /// -----
  Future<bool?> onPlay() async {
    if (getNguonAmThanh != null && getNguonAmThanh?.isNotEmpty == true) {
      switch (getLoaiHinhAmThanh) {
        case LoaiHinhAmThanh.amThanhHieuUng:
          {
            await getMayPhatAmThanh?.onPlayHieuUngAmThanh(
              nguonAmThanh: getNguonAmThanh!,
              nguonAmThanhLuuVaoRam: getNguonAmThanhLuuVaoRam,
              nguonAmThanhSanSang: getNguonAmThanhSanSang,
            );
          }
        case LoaiHinhAmThanh.amThanhBackground:
          {
            await getMayPhatAmThanh?.onPlayAmThanhBackground(nguonAmThanh: getNguonAmThanh!);
          }
      }
    }
    return true;
  }

  /// -----
  /// TODO: Ph√°t √Çm Thanh
  /// -----
  Future<bool?> onPlayHieuUngAmThanhNganXep() async {
    if (getNguonAmThanh != null && getNguonAmThanh?.isNotEmpty == true) {
      switch (getLoaiHinhAmThanh) {
        case LoaiHinhAmThanh.amThanhHieuUng:
          {
            await getMayPhatAmThanh?.onPlayHieuUngAmThanhNganXep();
          }
        case LoaiHinhAmThanh.amThanhBackground:
          {
            await getMayPhatAmThanh?.onPlayHieuUngAmThanhNganXep();
          }
      }
    }
    return true;
  }

  /// -----
  /// TODO: Copy File √Çm Thanh V√†o B·ªô Nh·ªõ T·∫°m
  /// -----
  Future<String> copyPackageMp3ToTemp(String assetPath) async {
    final ByteData data = await rootBundle.load(assetPath);
    final tempDir = await getTemporaryDirectory();
    final file = File('${tempDir.path}/${assetPath.split('/').last}');
    await file.writeAsBytes(data.buffer.asUint8List(), flush: true);
    return file.path;
  }

  /// -----
  /// TODO: Copy File √Çm Thanh V√†o B·ªô Nh·ªõ T·∫°m N·∫øu Ch∆∞a L∆∞u Tr∆∞·ªõc ƒê√≥
  /// -----
  Future<String?> copyPackageMp3ToTempIfNeeded({required String? assetPath}) async {
    if (assetPath != null && getNguonAmThanh?.isNotEmpty == true) {
      try {
        final tempDir = await getTemporaryDirectory();
        final fileName = assetPath
            .split('/')
            .last;
        final File file = File('${tempDir.path}/$fileName');

        /// -----
        /// TODO: T·∫°m X√≥a R·ªìi Copy L·∫°i
        /// -----
        // await deleteFileByPath(assetPath: file.path);

        /// TODO: N·∫øu file ƒë√£ t·ªìn t·∫°i trong temp ‚ûî d√πng l·∫°i lu√¥n
        if (await file.exists()) {
          if (kDebugMode) {
            print('üü¢ File √Çm Thanh ƒê√£ T·ªìn T·∫°i Trong Kho L∆∞u Tr·ªØ: $assetPath');
          }
          return file.path;
        }

        /// TODO: N·∫øu ch∆∞a c√≥ ‚ûî copy asset t·ª´ package ra temp
        final ByteData data = await rootBundle.load(assetPath);
        await file.writeAsBytes(data.buffer.asUint8List(), flush: true);
        return file.path;
      } catch (e) {
        if (kDebugMode) {
          print('üí¢üí¢üí¢ L∆∞u File √Çm Thanh Kh√¥ng Th√†nh C√¥ng üí¢üí¢üí¢: $assetPath');
        }
      }
    }

    return null;
  }

  /// -----
  /// TODO: Delete File √Çm Thanh V√†o B·ªô Nh·ªõ T·∫°m N·∫øu C·∫ßn X√≥a Khi Ph√°t Tri·ªÉn
  /// -----
  Future<void> deleteFileByPath({required String? assetPath}) async {
    if (assetPath != null && getNguonAmThanh?.isNotEmpty == true) {
      try {
        final file = File(assetPath);

        if (await file.exists()) {
          await file.delete();
          if (kDebugMode) {
            print('‚úÖ üî¥ ƒê√£ X√≥a File √Çm Thanh: $assetPath');
          }
        } else {
          if (kDebugMode) {
            print('‚ö†Ô∏è [Kh√¥ng Th·ªÉ X√≥a] File √Çm Thanh Kh√¥ng T·ªìn T·∫°i: $assetPath');
          }
        }
      } catch (e) {
        if (kDebugMode) {
          print('üí¢üí¢üí¢ X√≥a File √Çm Thanh Kh√¥ng Th√†nh C√¥ng üí¢üí¢üí¢: $assetPath');
        }
      }
    }
  }
}
